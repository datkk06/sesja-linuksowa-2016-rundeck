# this playbook is intended to be included from prepare_systemd-nspawn-containers.yml
# don't run it manually

- include_vars: "../inventory/host_vars/{{ item }}.yml"

- name: Check if container FS exists
  stat: >
    path={{ sesja.containers.path }}/{{ item }}
  register: container_fs_state

- name: Copy template FS for new container
  command: >
    cp -R {{ sesja.containers.path }}/template {{ sesja.containers.path }}/{{ item }}
  when: "{{ container_fs_state.stat.exists }} == false"

- name: Prepare network configuration directory
  file: >
    path={{ sesja.containers.path }}/{{ item }}/etc/systemd/network
    state=directory
    owner=root
    group=root
    mode=0755

- name: Disable default network device
  file: >
    dest={{ sesja.containers.path }}/{{ item }}/etc/systemd/network/80-container-host0.network
    src=/dev/null
    state=link

- name: Enable systemd-networkd service inside container
  file: >
    dest={{ sesja.containers.path }}/{{ item }}/etc/systemd/system/multi-user.target.wants/systemd-networkd.service
    src={{ sesja.containers.path }}/{{ item }}/usr/lib/systemd/system/systemd-networkd.service
    state=link

- name: Enable systemd-resolved service inside container
  file: >
    dest={{ sesja.containers.path }}/{{ item }}/etc/systemd/system/multi-user.target.wants/systemd-resolved.service
    src={{ sesja.containers.path }}/{{ item }}/usr/lib/systemd/system/systemd-resolved.service
    state=link

- name: Create host0 configuration file
  template: >
    src=templates/host0.network.j2
    dest={{ sesja.containers.path }}/{{ item }}/etc/systemd/network/host0.network

- name: Enable sshd service inside container
  file: >
    dest={{ sesja.containers.path }}/{{ item }}/etc/systemd/system/multi-user.target.wants/sshd.service
    src={{ sesja.containers.path }}/{{ item }}/usr/lib/systemd/system/sshd.service
    state=link

- name: Create .ssh root dir
  file: >
    path={{ sesja.containers.path }}/{{ item }}/root/.ssh
    owner=root
    group=root
    mode=0700
    state=directory

- name: Check root has skel files in place
  stat: >
    path={{ sesja.containers.path }}/{{ item }}/root/.bash_profile
  register: container_rootskel_state

- name: Copy skel files to root homedir
  shell: cp {{ sesja.containers.path }}/{{ item }}/etc/skel/.bash* {{ sesja.containers.path }}/{{ item }}/root/
  when: "{{ container_rootskel_state.stat.exists }} == false"

# not using authorized_key module as running from
# outside of container
- name: Prepare root's authorized key
  copy: >
    src=files/ssh_keys/authorized_keys
    dest={{ sesja.containers.path }}/{{ item }}/root/.ssh/authorized_keys
    owner=root
    group=root
    mode=0600

- name: Create systemd-nspawn service dir
  file: >
    path=/etc/systemd/system/systemd-nspawn@{{ item }}.service.d
    state=directory
    owner=root
    group=root
    mode=755

- name: Override default machine settings
  copy: >
    src=files/override.conf
    dest="/etc/systemd/system/systemd-nspawn@{{ item }}.service.d/override.conf"
    owner=root
    group=root
    mode=0644

- name: Enable container service
  service: >
    name=systemd-nspawn@{{ item }}.service
    enabled=yes
    state=started

- name: add proper settings for rundeck user to /etc/sudoers
  lineinfile: >
    dest=/etc/sudoers
    regexp="^Defaults:rundeck	!requiretty"
    line="Defaults:rundeck	!requiretty"

